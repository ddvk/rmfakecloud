{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>rmfakecloud is a clone of the cloud sync the remarkable tablet is using, in case you want to sync/backup your files and have full control of the hosting/storage environment.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>File synchronization (compatible with revisions 1.0 and 1.5)</li> <li>Integrations with external files sources (using webdav or with a dedicated directory on local file system, instead of Google Drive and Dropbox)</li> <li>Send document by email</li> <li>Handwriting recognition</li> <li>Unlock the screen sharing feature (but it doesn't work remotely, you should use the app through USB)</li> </ul> <p>It comes with a very basic web interface that let you:</p> <ul> <li>Register user</li> <li>Connect to your account</li> <li>Generate one time code for device registration</li> <li>View synchronized files</li> <li>Download PDF of the synchronized files</li> <li>Upload new documents</li> </ul> <p>Please note that this project is under development and there are many features that requires to tweak configuration files directly.</p>"},{"location":"#wish-list","title":"Wish List","text":"<p>Here is a list of tasks that still need to be accomplished:</p> <ul> <li>UI:<ul> <li>specify folder on upload</li> <li>add/remove users</li> <li>move files around</li> <li>rename files</li> <li>realtime notifications</li> <li>document preview</li> <li>archive / restore documents</li> <li>share files between users</li> <li>refactoring</li> <li>sent emails history</li> </ul> </li> <li>add message broker</li> <li>add db</li> <li>add blob storage</li> </ul>"},{"location":"browser-extension/","title":"Browser Extension Support","text":"<p>As of commit a62153e, the Read on reMarkable Chrome extension is supported by rmfakecloud. Of course, the extension needs to be modified to connect to your cloud.</p> <ol> <li> <p>Install the extension from the Chrome Web Store.</p> </li> <li> <p>Find the extension directory:</p> </li> <li>Go to <code>chrome://extensions</code> in your browser, find \"Read on reMarkable\" in the list, and take note of the ID.<ul> <li>Mine is <code>bfhkfdnddlhfippjbflipboognpdpoeh</code>.</li> </ul> </li> <li>Go to <code>chrome://version</code> in your browser, and take note of the \"Profile Path\".<ul> <li>Mine is <code>/home/murchu27/.config/BraveSoftware/Brave-Browser/Default</code> (Linux).</li> </ul> </li> <li> <p>Your extension directory will be <code>{Profile Path}/Extensions/{ID}/{some version number}</code>.</p> <ul> <li>Mine is <code>/home/murchu27/.config/BraveSoftware/Brave-Browser/Default/Extensions/bfhkfdnddlhfippjbflipboognpdpoeh/1.2.0_0</code>.</li> </ul> </li> <li> <p>Within the extension directory, replace any instances of <code>https://internal.cloud.remarkable.com</code> and     <code>https://webapp-production-dot-remarkable-production.appspot.com/</code> with the URL of your cloud (same as the <code>STORAGE_URL</code> used by the tablet).    You will need to do this in <code>manifest.json</code>, and any of the <code>.js</code> files.</p> </li> <li> <p>If you are using Linux, you can save the below script as, e.g., <code>rmfakecloud-patch.sh</code>.      <code>mycloud=$1      find ./ -type f -exec sed -i \"s/https:\\/\\/internal.cloud.remarkable.com/$mycloud/g\" {} \\;      find ./ -type f -exec sed -i \"s/https:\\/\\/webapp-production-dot-remarkable-production.appspot.com/$mycloud/g\" {} \\;</code></p> </li> <li> <p>Make this script executable with <code>chmod +x rmfakecloud-patch.sh</code>.</p> </li> <li> <p>Run the script, passing in the URL of your cloud, e.g., <code>./rmfakecloud-patch.sh http://mycloud.com</code>.</p> </li> <li> <p>Reload the extension in your browser:</p> </li> <li>Go to <code>chrome://extensions</code> in your browser. Enable \"Developer mode\" using the toggle at the top right.</li> <li>Click the newly appeared \"Load unpacked\" button, a dialogue box will open.</li> <li> <p>Navigate to the extension directory (the same one as in the step above), and click \"Open\".</p> </li> <li> <p>Try using the extension. Webpages should be sent to your tablet!</p> </li> </ol> <p>See #67 for the original discussion of this feature.</p>"},{"location":"install/configuration/","title":"Configuration","text":"<p>The configuration is made through environment variables.</p>"},{"location":"install/configuration/#general-configuration","title":"General configuration","text":"Variable name Description <code>JWT_SECRET_KEY</code> The secret key used to sign the authentication token.If you don't provide it, a random secret is generated, invalidating all connections established previously to be closed.A good secret is for example: <code>openssl rand -base64 48</code> <code>STORAGE_URL</code> It controls whether file upload/download goes through the local proxy or to an external server. It's the full address (protocol, host, port, path) of rmfakecloud as visible from the tablet, especially if the host is behind a reverse proxy or in a container. Example: <code>http://192.168.2.3:3000</code> (default: <code>https://local.appspot.com</code>), on SW 3.15 only https without port will work <code>PORT</code> listening port number (default: 3000) <code>DATADIR</code> Set data/files directory (default: <code>data/</code> in current dir) <code>LOGLEVEL</code> Set the log verbosity. Default is info, set to debug for more logging or warn, error for less <code>RM_HTTPS_COOKIE</code> For the UI, force cookies to be available only via https <code>RM_TRUST_PROXY</code> Trust the proxy for client ip addresses (X-Forwarded-For/X-Real-IP) default false"},{"location":"install/configuration/#handwriting-recognition","title":"Handwriting recognition","text":"<p>To use the handwriting recognition feature, you need first to create a free account on https://developer.myscript.com/ (up to 2000 free recognitions per month).</p> <p>Then you'll obtains an application key and its corresponding HMAC to give to rmfakecloud:</p> Variable name Description <code>RMAPI_HWR_APPLICATIONKEY</code> Application key obtained from myscript <code>RMAPI_HWR_HMAC</code> HMAC obtained from myscript <code>RMAPI_HWR_LANG_OVERRIDE</code> Optional: Use this if you want your handwriting to be recognized as a different language. This variable accepts a locale code (e.g., zh_CN). Refer to this page for supported languages."},{"location":"install/configuration/#email-settings","title":"Email settings","text":"<p>To be able to send email from your reMarkable, fill the following variables:</p> Variable name Description <code>RM_SMTP_SERVER</code> The SMTP server address in  host:port format <code>RM_SMTP_USERNAME</code> The username/email for login <code>RM_SMTP_PASSWORD</code> Plaintext password (application password should work) <code>RM_SMTP_FROM</code> Custom <code>From:</code> header for the mails (eg. <code>ReMarkable self-hosted &lt;remarkable@my.example.net&gt;</code>). If this override is set, the user's email address is instead put as <code>Reply-To</code> <code>RM_SMTP_HELO</code> Custom HELO, if your email provider needs it <code>RM_SMTP_NOTLS</code> don't use tls <code>RM_SMTP_STARTTLS</code> use starttls command, should be combined with NOTLS. in most cases port 587 should be used <code>RM_SMTP_INSECURE_TLS</code> If set, don't check the server certificate (not recommended)"},{"location":"install/docker/","title":"With Docker","text":"<p>You can evaluate the program with:</p> <pre><code>docker run -it --rm -p 3000:3000 ddvk/rmfakecloud\n</code></pre> <p>To setup it for normal ussage, you'll use need to setup a volume to store user configuration and documents:</p> <pre><code>docker run -it --rm -p 3000:3000 -v ./data:/data -e JWT_SECRET_KEY='something' ddvk/rmfakecloud\n</code></pre> <p>Explore others configuration variables on the dedicated page.</p>"},{"location":"install/docker/#docker-compose-file","title":"docker-compose file","text":"<pre><code>version: \"3\"\nservices:\n  rmfakecloud:\n    image: ddvk/rmfakecloud\n    container_name: rmfakecloud\n    restart: unless-stopped\n    env_file:\n      - env\n    volumes:\n      - ./data:/data\n</code></pre> <p>In this example, an external file named <code>env</code> is provided that contains the environment variables. Any of the ways to set environment variables for docker compose will work.</p> <p>For the possible environment variables, please have a look in the configuration section.</p>"},{"location":"install/docker/#rebuild-the-image","title":"Rebuild the image","text":"<p>You can use the script <code>dockerbuild.sh</code> or there is a <code>make</code> rule:</p> <pre><code>make docker\n</code></pre>"},{"location":"install/fail2ban/","title":"Fail2ban","text":"<p>For a public server fail2ban adds some security by banning ip's after few (configurable) failed login attempts. Assuming rmfakecloud is running in docker via systemd and logs to the syslog (journalctl) and fail2ban is already installed and setup. Instructions install and setup fail2ban in the documentation of the used operating system or at https://github.com/fail2ban/fail2ban#installation . rmfakecloud needs to trust the reverse proxy in use, i.e. add <code>RM_TRUST_PROXY=1</code> to the docker environment, see configuration.</p>"},{"location":"install/fail2ban/#jail","title":"Jail","text":"<p>First it is necessary to define a jail, e.g. in <code>/etc/fail2ban/jail.local</code>:</p> <pre><code>[rmfakecloud]\nenabled   = true\nfilter   = rmfakecloud\naction   = iptables-multiport[name=HTTP, port=\"http,https\"]\njournalmatch = _SYSTEMD_UNIT=docker-rmfakecloud.service\n</code></pre> <p>where it is necessary to change \"docker-rmfakecloud.service\" to the name of the systemd service used to run the server and the ban action appropriate to the setup of the host.</p>"},{"location":"install/fail2ban/#filter","title":"Filter","text":"<p>Additionally the filter</p> <pre><code>[Definition]\nfailregex = ^.*, login failed ip:\\s+&lt;ADDR&gt;.*$\n</code></pre> <p>in <code>/etc/fail2ban/filter.d/rmfakecloud.conf</code> tells fail2ban which lines are relevant.</p> <p>After creating the necessary configuration, restarting fail2ban loads the changes.</p>"},{"location":"install/helm/","title":"With Helm","text":""},{"location":"install/helm/#install-with-helm","title":"Install with Helm","text":"<p>You will need to clone the repo : </p> <pre><code>git clone https://github.com/ddvk/rmfakecloud &amp;&amp; cd rmfakecloud/helm\n\nModify your variables just like a simple docker-compose\n```sh\nvim values.yml\n</code></pre> <p>Install the helm chart</p> <pre><code>helm install myrmfakecloud .\n</code></pre>"},{"location":"install/helm/#create-first-user","title":"Create first user","text":"<p>Create your first user using kubectl exec:</p> <pre><code>export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"rmfakecloud.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl exec $POD_NAME -- /rmfakecloud-docker setuser -u ddvk -a\n</code></pre> <p>(You may need to restart the pod)</p> <p>You can reset a password with : </p> <pre><code>export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"rmfakecloud.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl exec $POD_NAME -- /rmfakecloud-docker setuser -u ddvk -p \"${NEWPASSWD}\"\n</code></pre>"},{"location":"install/source/","title":"Building","text":""},{"location":"install/source/#dependencies","title":"Dependencies","text":"<p>To be able to compile from source, you'll need the following dependencies:</p> <ul> <li>nodejs version 16 at most</li> <li>pnpm</li> <li>go version 1.16 at least</li> <li>make</li> </ul>"},{"location":"install/source/#build","title":"Build","text":"<pre><code>git clone https://github.com/ddvk/rmfakecloud\ncd rmfakecloud\nmake all\n</code></pre>"},{"location":"install/source/#installing","title":"Installing","text":"<ol> <li>Copy the <code>rmfakecloud</code> binary for your system from the <code>dist</code> folder to <code>/usr/local/bin</code> and rename it to <code>rmfakecloud</code>    e.g. <code>cp dist/rmfakecloud-x64 /usr/local/bin/rmfakecloud</code>    or <code>scp dist/rmfakecloud-armv7 raspberry:/usr/local/bin/rmfakecloud</code></li> <li>Setup the service to run with your init system. See below for examples</li> <li>Create and modify the configuration file. See below for examples</li> <li>Create the library folder you specified in your configuration file.    e.g. <code>mkdir /usr/local/lib/rmfakecloud</code></li> <li>Enable and start the service with your init system.    e.g. <code>rc-update add rmfakecloud &amp;&amp; service start rmfakecloud</code> or <code>systemctl enable --now rmfakecloud</code></li> </ol>"},{"location":"install/source/#init-system-examples","title":"Init System Examples","text":""},{"location":"install/source/#openrc","title":"OpenRC","text":"<p>/etc/init.d/rmfakecloud</p> <pre><code>#!/sbin/openrc-run\n\nname=\"rmfakecloud\"\ncommand=\"/usr/local/bin/rmfakecloud\"\ncommand_args=\"\"\npidfile=\"/var/run/rmfakecloud.pid\"\ncommand_background=\"yes\"\noutput_log=\"/var/log/messages\"\nerror_log=\"/var/log/messages\"\ndepend() {\n    need net localmount\n}\n</code></pre> <p>/etc/conf.d/rmfakecloud</p> <pre><code># Basic settings\nexport JWT_SECRET_KEY=SOME_KEY\nexport STORAGE_URL=http(s)://host.where.rmfakecloud.is.running\nexport PORT=80\nexport DATADIR=/usr/local/lib/rmfakecloud\nexport LOGLEVEL=info\n# uncomment if using TLS\n#export PORT=443\n#export TLS_KEY=/path/to/somekey\n#export TLS_CERT=/path/to/somecert\n#export RM_HTTPS_COOKIE=1\n\n# Email\nexport RM_SMTP_SERVER=smtp.gmail.com:465\nexport RM_SMTP_USERNAME=MY_EMAIL_ADDRESS\nexport RM_SMTP_PASSWORD=MY_SMTP_OR_APP_PASSWORD\n# Handwriting recognition\nexport RMAPI_HWR_APPLICATIONKEY=SOME_KEY\nexport RMAPI_HWR_HMAC=SOME_KEY\n</code></pre> <p>Make sure to replace <code>SOME_KEY</code> by the return of <code>openssl rand -base64 48</code>, see configuration.</p> <p>If using GMail, ensure you enable 2FA on that Google account, generate a GMail app password (https://myaccount.google.com/u/0/apppasswords), and provide the app password instead of the account password above.</p>"},{"location":"install/source/#systemd","title":"systemd","text":"<p>rmfakecloud.service</p> <pre><code>[Unit]\nDescription=rmfakecloud\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nExecStart=/usr/local/bin/rmfakecloud\nEnvironmentFile=/etc/rmfakecloud.conf\n\n[Install]\nWantedBy=multi-user.target\n\n</code></pre> <p>rmfakecloud.conf</p> <pre><code>JWT_SECRET_KEY=SOME_KEY\nSTORAGE_URL=http(s)://host.where.rmfakecloud.is.running\nPORT=80\nDATADIR=/usr/local/lib/rmfakecloud\nLOGLEVEL=info\n# uncomment if using TLS\n#PORT=443\n#TLS_KEY=/path/to/somekey\n#TLS_CERT=/path/to/somecert\n#RM_HTTPS_COOKIE=1\n\n# Email\nRM_SMTP_SERVER=smtp.gmail.com:465\nRM_SMTP_USERNAME=MY_EMAIL_ADDRESS\nRM_SMTP_PASSWORD=MY_SMTP_OR_APP_PASSWORD\n# Handwriting recognition\nRMAPI_HWR_APPLICATIONKEY=SOME_KEY\nRMAPI_HWR_HMAC=SOME_KEY\n</code></pre> <p>Make sure to replace <code>SOME_KEY</code> with the output of <code>openssl rand -base64 48</code>, see configuration.</p> <p>If using GMail, ensure you enable 2FA on that Google account, generate a GMail app password (https://myaccount.google.com/u/0/apppasswords), and provide the app password instead of the account password above.</p>"},{"location":"install/reverse-proxy/apache/","title":"Apache","text":"<p>From discord/xabean#2732 | github.com/warewolf</p> <p>client: rM2, Toltec, rmfakecloud installed via opkg. Follow the device installation instructions here: https://ddvk.github.io/rmfakecloud/remarkable/setup/ server: rmfakecloud docker image, docker-compose.yml + env</p>"},{"location":"install/reverse-proxy/apache/#how-i-setup-rmfakecloud-for-myself","title":"How I setup rmfakecloud for myself","text":"<p>General steps:</p> <ul> <li>Add a 'remarkable' user on my VPS</li> <li>I already had an existing wildcard *.mydomain.com LetsEncrypt certificate</li> <li>I <code>su -s /bin/bash remarkable</code> to become the remarkable user</li> <li>Then <code>mkdir rmfakecloud; cd rmfakecloud</code></li> <li>Next, <code>mkdir data</code> for where rmfakecloud will store the data</li> <li>Create <code>docker-compose.yml</code> and <code>env</code> files (copy and change contents from below)</li> <li>Run <code>docker-compose up</code> to launch it in your terminal - you will need to hit Ctrl-C to stop it later</li> <li>Add apache config below to your apache's <code>conf.d</code> directory, or <code>sites-enabled</code> directory, depending on your OS</li> <li>Run <code>apachectl configtest</code> to make sure your apache config works</li> <li>Run <code>apachecctl graceful</code> to restart the webserver</li> <li>Try browsing to <code>https://rmfakecloud.mydomain.com</code> and make sure you see the rmfakecloud login page</li> <li>Add yourself a user: <code>docker exec rmfakecloud /rmfakecloud-docker setuser -u UserNameHere -a</code> -- this will print out to the screen a randomly generated password</li> <li>Log in as your username with the password it gave you, you can change it via the web UI later</li> <li>Click 'code' in the top to generate your cloud link code.</li> <li>On your rM2, go Menu -&gt; Settings -&gt; General -&gt; Account -&gt; Connect</li> <li>Enter your cloud link code from your rmfakecloud web UI</li> <li>Documents should now start syncing, you should see stuff scrolling by in your <code>docker-compose up</code> window.  Let it go for a while until it finishes.</li> <li>Make sure the cloud icon to the right of the wifi icon in the bottom left of the main \"my files\" screen on your rM2 tablet doesn't have an X saying the cloud is broken</li> <li>Hit Ctrl-C in your <code>docker-compose up</code> window to stop your rmfakecloud, we're done testing</li> <li>Run <code>docker-compose up -d</code> to have it run in the background like a service</li> </ul> <p>Hopefully at this point, everything works?</p>"},{"location":"install/reverse-proxy/apache/#docker","title":"Docker","text":"<p>docker-compose.yml:</p> <pre><code>version: \"3.4\"\nservices:\n  rmfakecloud:\n    network_mode: host\n    image: ddvk/rmfakecloud\n    container_name: rmfakecloud\n    restart: unless-stopped\n    ports: \n      - 3000:3000\n    env_file:\n      - env\n    volumes:\n      - /home/remarkable/rmfakecloud/data:/data\n</code></pre> <ul> <li><code>network_mode: host</code> so that the docker container can reach my mail server</li> </ul> <p>env:</p> <pre><code>RMAPI_HWR_APPLICATIONKEY=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\nRMAPI_HWR_HMAC=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\nSTORAGE_URL=https://rmfakecloud.mydomain.com\nPORT=3000\nLOGLEVEL=debug\nRM_SMTP_SERVER=127.0.0.1:465\nRM_SMTP_USERNAME=\nRM_SMTP_PASSWORD=\nRM_SMTP_FROM=ReMarkable selfhosted &lt;rmfakecloud@mydomain.com&gt;\nJWT_SECRET_KEY=YouReallyShouldSetThisInConfigAndNotLeaveItThisStaticValueExampl\nRM_SMTP_INSECURE_TLS=true\n</code></pre> <ul> <li>JWT_SECRET_KEY - set this in config, othrewise every time your server goes up/down</li> </ul>"},{"location":"install/reverse-proxy/apache/#apache","title":"Apache","text":"<p>rmfakecloud.conf:</p> <pre><code>LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\n\n&lt;VirtualHost rmfakecloud.mydomain.com&gt;\n  ServerName rmfakecloud.mydomain.com\n  SSLEngine on\n  SSLCertificateFile /etc/httpd/conf/ssl.key/mydomain.com-fullchain.pem\n  SSLCertificateKeyFile /etc/httpd/conf/ssl.key/mydomain.com-cert.pem\n\n  ProxyPass / http://localhost:3000/\n  ProxyPassReverse / http://localhost:3000/\n  ProxyRequests Off\n  RewriteEngine on\n  RewriteCond %{HTTP:Upgrade} websocket [NC]\n  RewriteCond %{HTTP:Connection} upgrade [NC]\n  RewriteRule ^/?(.*) \"ws://localhost:3000/$1\" [P,L]\n&lt;/VirtualHost&gt;                                      \n</code></pre>"},{"location":"install/reverse-proxy/nginx/","title":"Nginx","text":"<p>From @zeigerpuppy</p> <p>I have rmfakecloud up and running (reMarkable 2 client, Debian 9 server).  It's working great, sync, emails and handwriting recognition are all good.</p> <p>I am using the local proxy config and have now tested a working HTTPS connection for increased security (comments appreciated).</p> <p>Currently, my understanding is that in the default config, the proxy is just establishing an HTTP proxy connection as the rmfakecloud is served on http://server:3000.</p> <p>I would like to have this working on public IP networks too and have set up a NAT rule to forward port 3000 to my local server.  This works but I guess it's all unencrypted.</p> <p>note that once HTTPS is working, direct forwarding of port 3000 should be disabled!</p> <p>So, to get it working via HTTPS, I think all we need to do is to set up a reverse HTTPS proxy on the server.</p> <p>NB: I initially tried this with Apache2 but couldn't get the websockets working.  The error on the server was this:</p> <pre><code>INFO[0387] accepting websocket abc\nINFO[0387] upgrade:websocket: the client is not using the websocket protocol: 'upgrade' token not found in 'Connection' header\nINFO[0387] closing the ws\nINFO[0387] [GIN] 2020/11/17 - 13:39:41 | 400 |      201.78\u00b5s |       127.0.0.1 | GET      \"/notifications/ws/json/1\"\n</code></pre> <p>So, I tried with an nginx reverse proxy with the following config:</p> <pre><code>server {\n    # increase max request size (for large PDFs)\n    client_max_body_size 200M;\n    server_name rmfakecloud.server.net;\n\n    listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/rmfakecloud.server.net/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/rmfakecloud.server.net/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    location / {\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_set_header Host $host;\n\n      proxy_pass http://localhost:3000;\n\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection \"upgrade\";\n\n      proxy_read_timeout 1d;\n      proxy_send_timeout 1d;\n    }\n  }\n}\n</code></pre> <p>That seems to work well. There were two other config changes to make:</p> <ol> <li>set the STORAGE_URL on the server: <code>export STORAGE_URL=https://rmfakecloud.server.net</code></li> <li>change the proxy URL on the device: </li> </ol> <p>stop services</p> <pre><code>systemctl stop xochitl\nsystemctl stop proxy \n</code></pre> <p>edit the proxy address</p> <pre><code>nano /etc/systemd/system/proxy.service\n</code></pre> <p>change the line <code>ExecStart</code> to have the new address</p> <pre><code>...\nExecStart=/home/root/scripts/rmfakecloud/secure -cert /home/root/scripts/rmfakecloud/proxy.crt -key /home/root/scripts/rmfakecloud/proxy.key https://rmfakecloud.server.net\n...\n</code></pre> <p>reload and start services</p> <pre><code>systemctl daemon-reload\nsystemctl start proxy\nsystemctl start xochitl\n</code></pre> <p>I think this is all good, happy to hear feedback but I think we should amend a section on the README to show how to configure with HTTPS.</p> <p>Now, the only thing needed is starting the server automatically....</p>"},{"location":"install/reverse-proxy/traefik/","title":"Coming Soon","text":""},{"location":"remarkable/https/","title":"HTTPS","text":"<p>Now you can run TLS directly on rmfakecloud:</p> <pre><code>TLS_CERT=somecert\nTLS_KEY=somecertkey\n</code></pre>"},{"location":"remarkable/setup/","title":"Device Setup","text":"<p>There are several ways to make it work, choose whatever works for you</p> <p>Important</p> <p>Whenever the tablet receives a system update, the cloud connection will break, and will have to be reenabled.</p>"},{"location":"remarkable/setup/#automatic","title":"Automatic","text":""},{"location":"remarkable/setup/#toltec","title":"toltec","text":"<p>Install using toltec.</p> <pre><code>opkg install rmfakecloud-proxy\nrmfakecloudctl set-upstream &lt;URL&gt;\nrmfakecloudctl enable\n</code></pre> <p>The <code>&lt;URL&gt;</code> above has to be the same as in the <code>STORAGE_URL</code> server configuration.</p>"},{"location":"remarkable/setup/#rmfakecloud-proxy-script","title":"rmfakecloud-proxy script","text":"<p>Get the installer from: rmfakecloud-proxy scp to the device and run it</p> <pre><code>scp installer.sh root@10.11.99.1:\nssh root@10.11.99.1\nchmod +x ./installer-xxxx.sh\n./installer-xxxx.sh\n</code></pre> <p>the automagic script doesn't work anymore, because of the busybox wget tls</p> <pre><code>sh -c \"$(wget https://raw.githubusercontent.com/ddvk/rmfakecloud/master/scripts/device/automagic.sh -O-)\"\n</code></pre>"},{"location":"remarkable/setup/#manual","title":"Manual","text":""},{"location":"remarkable/setup/#installing-a-proxy-on-devices","title":"Installing a proxy on devices","text":"<p>A reverse proxy rmfakecloud-proxy has to be installed run rmfakecloud on whichever port you want, you can use either HTTP (not recommended) or HTTPS, generate a new cert for the url you chose e.g with Let's Encrypt</p> <p>Steps (done by the automagic scripts):</p> <ul> <li>generate a CA and host certificate for <code>*.appspot.com</code></li> <li>create the CA folder: <code>mkdir -p /usr/local/share/ca-certificates</code></li> <li>copy the CA.crt file to <code>/usr/local/share/ca-certificates</code> and run <code>update-ca-certificates</code></li> <li>modify the hosts file <code>/etc/hosts</code></li> <li>Run a reverse https proxy on the rm tablet as a service, e.g. secure,</li> <li>stop xochitl <code>systemctl stop xochitl</code></li> <li>add the followint entries to <code>/etc/hosts</code></li> </ul> <pre><code>127.0.0.1 hwr-production-dot-remarkable-production.appspot.com\n127.0.0.1 service-manager-production-dot-remarkable-production.appspot.com\n127.0.0.1 local.appspot.com\n127.0.0.1 my.remarkable.com\n127.0.0.1 ping.remarkable.com\n127.0.0.1 internal.cloud.remarkable.com\n</code></pre> <ul> <li>set the address of your api host:port in the reverse proxy     <code>secure -cert proxy.crt -key proxy.key http(s)://host_where_the_api_is_running:someport</code>     or use the provided systemd unit file and put the config in proxycfg</li> <li>set the <code>STORAGE_URL</code> to point to this address (this thing the device can resolve/see e.g the reverse proxy, public dns etc)</li> <li>run the host</li> <li>run <code>fixsync.sh</code> on the device to mark all files as new (not to be deleted from the device)</li> <li>start xochitl <code>systemctl start xochitl</code></li> </ul> <p>Windows/Mac Desktop Client:</p> <ul> <li>modify the hosts file (<code>\\system32\\drivers\\etc\\hosts</code>) add the same entries as on the tablet</li> <li>run a reverse proxy on the host or somewhere else pointing it to rmfakecloud with the same certs</li> <li>profit</li> </ul> <p>PROS: easy setup, you can use whichever port you want, you can get a real trusted ca cert from let's encrypt, if running in a trusted network you may chose to use HTTP CONS: you have to configure HTTPS on the host yourself, additional Desktop config</p>"},{"location":"remarkable/setup/#modify-device-etchosts","title":"Modify device /etc/hosts","text":"<p>Connect to the host directly, without a reverse proxy, with HTTPS on :443</p> <p>Steps:</p> <ul> <li>generate the certs from Variant 1, you get them (proxy.crt, proxy.key, ca.crt) and trust the ca.crt</li> <li>run rmfakecloud with:</li> </ul> <pre><code>TLS_KEY=proxy.key\nTLS_CERT=proxy.crt\nSTORAGE_URL=https://local.appspot.com\n</code></pre> <ul> <li>modify <code>/etc/hosts</code> but use the rmfakecloud's ip instead of 127.0.0.1</li> </ul> <p>Windows/Mac Desktop Client:</p> <ul> <li>trust the <code>ca.crt</code>  (add it to Trusted Root CA, use cert.msc)</li> <li>modify the hosts file (<code>\\system32\\drivers\\etc\\hosts</code>) add the same entries as on the tablet</li> <li>profit</li> </ul> <p>PROS: you can use the Windows/Mac clients, no need for a proxy on the device CONS: a bit harder to setup, each host has to trust the ca and modify the hosts file, you have to use port 443</p>"},{"location":"remarkable/setup/#edit-router-dns-entries","title":"Edit router DNS entries","text":"<p>Same as the previous method, but instead of modifying any hosts file, make the changes on your DNS/router:</p> <ul> <li>add the host entries directly on your router (Hosts in OpenWRT)</li> <li>trust the ca.crt</li> <li>profit</li> </ul> <p>PROS: a bit easier, you can you even the mobile apps if you manage to install the root ca CONS: you can't use the official cloud anymore due to the mangled DNS</p>"},{"location":"remarkable/setup/#reenabling-after-a-system-update","title":"Reenabling after a system update","text":"<p>Navigate to whatever directory the proxy was downloaded to on your device.</p> <ul> <li>If you installed using the rmfakecloud-proxy script, this will likely be   <code>~/rmfakecloud/</code>.</li> </ul> <p>Run the below commands to reinstall the proxy service, which should reenable your cloud connection.</p> <pre><code># stop services\nsystemctl stop xochitl\nsystemctl stop proxy\n\n# reinstall the proxy service\n./installer.sh uninstall\n./installer.sh install\n\n# restart services\nsystemctl daemon-reload\nsystemctl start proxy\nsystemctl start xochitl\n</code></pre>"},{"location":"remarkable/setup/#login","title":"Login","text":"<p>After you installed the proxy, you will need to login to your account on your device.</p> <ol> <li>Click <code>Menu &gt; General &gt; Account</code>.</li> <li>Click on <code>Setup Account</code>.</li> <li>On your main computer:<ol> <li>Login to the rmfakecloud Web UI (if no proxy used, the same as the <code>STORAGE_URL</code> value in the server configuration).</li> <li>Press the <code>Code</code> link in the menu.</li> <li>Press the <code>Generate Code</code> button.</li> </ol> </li> <li>Enter the shown code on your device.</li> <li>To check that sync is working correctly. Go to <code>Menu &gt; Storage</code> and press <code>Check Sync</code>.</li> </ol>"},{"location":"usage/diff-sync/","title":"Diff Sync","text":"<p>Since the reMarkable 2.10 release, there is a new sync method available: It collects only differences instead of uploading the whole document. So it takes less time to upload/download large modified documents, and it handles edition conflicts.</p> <p>Note</p> <p>This feature is available since rmfakecloud v0.0.5.</p> <p>In order to use this feature, you'll need to update your user to activate it:</p> <pre><code>rmfakecloud setuser -u ddvk -a -s\n</code></pre> <p>The <code>-a</code> is to let/set the user admin: as the tool will remove the admin permission if not set.</p> <p>You'll then need to reconnect on your device to apply the settings, and a full resync will automatically begin.</p>"},{"location":"usage/diff-sync/#deal-with-file-lost","title":"Deal with file lost","text":"<p>There was an issue with <code>rmapi</code> affecting both official cloud and rmfakecloud, where files were randomly lost.</p> <p>The files were not deleted on rmfakecloud side, it was possible to relink them in the real document tree.</p> <p>Two utility have been designed to help to relink:</p> <ul> <li><code>history2git15</code>: it creates a git repository of the states of the tree, creating   a commit for each generation/tree modification.</li> <li><code>relinkfile15</code>: given an user and an root index name (it's sha256 hash as   seen in <code>.root.history</code> or as commit subject of <code>history2git15</code>), it'll relink all   files given as argument in their state at the time of the given root index.</li> </ul> <p>Warning</p> <p>Before using those utilities, please shutdown your <code>rmfakecloud</code> instance to avoid concurrent modifications and possible corruptions.</p>"},{"location":"usage/diff-sync/#history2git15","title":"<code>history2git15</code>","text":"<p>Before using <code>history2git15</code>, you need to install <code>git</code> on your system.</p> <p>This utility takes as argument a path to a <code>.root.history</code> file. It'll create an <code>history</code> directory, which will contain the git repository.</p> <pre><code>./history2git15 /var/lib/rmfakecloud/users/ddvk/sync/.root.history\n</code></pre> <p>As it can takes a large amount of time, you can limit to the latest modifications with the <code>-tail</code> option:</p> <pre><code>./history2git15 -tail 20 /var/lib/rmfakecloud/users/ddvk/sync/.root.history\n</code></pre> <p>In this example only the last 20 modifications of the tree will be saved as a git repository.</p> <p>After a successfull run, go to <code>/var/lib/rmfakecloud/users/ddvk/sync/history</code> and use <code>git</code> to explore the differences referenced in the two files:</p> <ul> <li><code>doctree</code>: this is a human readable hiereachy of the directories and   files, along with the date of the last modification.</li> <li><code>tree</code>: this is the whole tree state with all metadata accessible, in JSON   format.</li> </ul>"},{"location":"usage/diff-sync/#relinkfile15","title":"<code>relinkfile15</code>","text":"<p>Warning</p> <p>Be sure that <code>rmfakecloud</code> is stopped before using this command. Bad things will happen if some devices performs synchronization while <code>relinkfile15</code> works.</p> <p>This utility can relink in the root tree a non-deleted file.</p> <pre><code>DATA_DIR=/var/lib/rmfakecloud ./relink15 -user ddvk -root-hash 1c0ee6fb7fde7d09dd25b954dd9f23f950d9e25f1fbc661ca18aebf40bb14a00 \"Notebook 42\" \"My calendar.pdf\"\n</code></pre> <p><code>DATA_DIR</code> is the same option used by <code>rmfakecloud</code>. If you don't use it with <code>rmfakecloud</code>, make sure you are in the same directory as when you start <code>rmfakecloud</code>: you should have a <code>data/</code> directory.</p> <p>The <code>-user</code> option is the registration address used (or the name of the directory inside <code>data/users</code>).</p> <p>The <code>-root-hash</code> is the name of the file to use as the old root index.</p> <p>The rest of the arguments given to the command line are the name of the file as given by <code>history2git15</code> in <code>doctree</code> (or as <code>visibleName</code> in <code>tree</code>). This doesn't handle directories hierarchy at the time of writing: it only matches the filename. You need to make sure the parent directory still exists (as we said the hierarchy is handle by metadata, not by indexes). =======</p>"},{"location":"usage/diff-sync/#how-does-it-work","title":"How does it work?","text":"<p>All files are saved with a sha256 name in the user <code>sync</code> directory. File can be raw pages, document metadata, directory metadata, indexes, ...</p> <p>Each file is saved along with a generation number. Each modification increment this generation number.</p>"},{"location":"usage/diff-sync/#root-tree-file","title":"Root tree file","text":"<p>All files in the tree are indexed in a root index. The index references all the index to others files and directories.</p> <p>The hierarchy is given by each file metadata. The root index file doesn't handle file hierarchy.</p>"},{"location":"usage/diff-sync/#current-root-file-in-use","title":"Current root file in use","text":"<p>It is possible to retrieve the current root index in use by consulting the content of the file <code>root</code>. It contains the name of the file containing the root index.</p>"},{"location":"usage/diff-sync/#history-and-generation","title":"History and generation","text":"<p>Previous root indexes are kept in the directory and can be listed with the file <code>.root.history</code>. Each line corresponds to a given generation (line 1 = generation 1, ...) and contains the date of the modification and the corresponding filename.</p>"},{"location":"usage/diff-sync/#file-indexes","title":"File indexes","text":"<p>Each file, as seen on the tablet, is split in several parts (metadata, raw pages, cached transcripted text, content, ...). File indexes store the references of each sub-file.</p> <p>Files on the tablet are referenced by an UUID. On rmfakecloud files parts are also stores with sha256 names.</p>"},{"location":"usage/integrations/","title":"Integrations","text":"<p>Integration is the feature added in reMarkable 2.10 that allows to browse, download and upload document from location outside of the tablet.</p> <p>You can edit your integrations using the Integration tab in the UI.</p>"},{"location":"usage/integrations/#webdav","title":"WebDAV","text":"<p>It can be used with any WebDAV services, for example a Nextcloud/Owncloud instance.</p> <p>Add this to your <code>.userprofile</code>:</p> <pre><code>integrations:\n  - provider: webdav\n    id: [generate some uuid]\n    name: [some name]\n    username: [username]\n    password: [password]\n    address: [webdavaddrss]\n    insecure: [true/false] (to skip certificate checks)\n</code></pre> <p>For example:</p> <pre><code>integrations:\n  - provider: webdav\n    id: fLAME8YBm5uFJ89GKRAFkGjk7hJw0heow045kfhc\n    name: Home Nextcloud\n    address: https://home.example.com/remote.php/dav/files/user42/\n    username: user42\n    password: password4242\n</code></pre>"},{"location":"usage/integrations/#local-file-system","title":"Local File System","text":"<p>Warning</p> <p>Experimental and not suited for multiple users yet</p> <p>You can share a dedicated path on your system. This can be a simple directory or a mount point using FUSE or whatever.</p> <p>Add this to your <code>.userprofile</code>:</p> <pre><code>integrations:\n  - provider: localfs\n    id: [generate some uuid]\n    name: [some name]\n    path: /some/path/with/files\n</code></pre>"},{"location":"usage/integrations/#messaging-webhook","title":"Messaging webhook","text":"<p>Messaging are a type of integration added in software 3.17.</p> <p>Originally designed for Slack, this feature allows you to send your current sheet as an attachment to a Slack Canvas. The default behavior uses AI to transcribe the handwritten content on your sheet and posts both the text and the image to Slack.</p> <p>The Webhook integration extends this capability by sending your sheet to an external automation platform (like n8n, Make.com, ...) or custom service. This is especially useful if you want to: use your own AI pipeline or don't want AI to be involved at all, or store and process sheets in a custom backend, ...</p> <p>The webhook gives you full control: you decide what happens with your data.</p>"},{"location":"usage/userprofile/","title":"User Profile","text":"<p>Have a look inside <code>data</code> directory (<code>DATADIR</code>): you'll find under <code>data/users/</code> a directory by user (since v0.0.3). The directory name is expected to be the username given in the webUI login form.</p>"},{"location":"usage/userprofile/#user-settings","title":"User Settings","text":"<p>rmfakecloud stores user configuration (password, email, options, ...) in a file inside its directory, named <code>.userprofile</code>. This is a hidden file.</p> <p>This file, written in YAML, have the following relevant entries:</p> Entry Description <code>password</code> Password to access the account (in Argon2 format) <code>name</code> Name displayed in the webui <code>isadmin</code> Boolean indicating if the user can perform administration tasks (currently managing user accounts) <code>sync15</code> Boolean value that indicates if the user is using the diff synchronization (aka. sync 1.5) <code>integrations</code> Array with the user integrations. See Integrations"},{"location":"usage/userprofile/#edit-settings-through-cli","title":"Edit settings through CLI","text":"<p>Use the same binary as for launching the server: it takes some specials commands described bellow.</p> <p>When using the Docker image, you can run :</p> <pre><code>docker exec rmfakecloud /rmfakecloud-docker special-command\n</code></pre>"},{"location":"usage/userprofile/#rmfakecloud-listusers","title":"<code>rmfakecloud listusers</code>","text":"<p>This commands lists existing users.</p>"},{"location":"usage/userprofile/#rmfakecloud-setuser","title":"<code>rmfakecloud setuser</code>","text":"<p>This commands edit or create account.</p> <p>To create/update an admin account <code>ddvk</code>:</p> <pre><code>rmfakecloud setuser -u ddvk -a\n</code></pre> <p>To reset a password:</p> <pre><code>read -s -p \"New password: \" NEWPASSWD &amp;&amp; rmfakecloud setuser -u ddvk -p \"${NEWPASSWD}\"\n</code></pre>"},{"location":"usage/userprofile/#directory-structure","title":"Directory Structure","text":"<p>In a user directory, there are files like <code>[UUID].metadata</code> and <code>[UUID].zip</code> (if you are not using sync 1.5): this corresponds to your raw documents on your tablet.</p> <p>There is also a <code>trash</code> directory, containing deleted files on the tablet, in its trash.</p> <p>If you are using sync 1.5, the magic happen in the <code>sync</code> directory.</p>"}]}